#!/usr/bin/env node
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var program = require('commander');
var pkinfo = require('../package');
var api = require('.');
var map = require('./map');

function parseCell(info) {
  var result = {};
  var arr = info.split(',');
  if (arr.length === 4) {
    var _arr = _slicedToArray(arr, 4);

    result.mcc = _arr[0];
    result.mnc = _arr[1];
    result.lac = _arr[2];
    result.cid = _arr[3];
  }
  return result;
}

function parseArguments(data) {
  var result = {};
  data.split(',').forEach(function (x) {
    var pair = x.split(':');
    if (pair[0]) {
      result[pair[0].trim()] = pair[1].trim();
    }
  });
  return result;
}

function setup() {
  program.description('Locate geolocation information based on Cell base station data').version(pkinfo.version).option('-c, --cell <cell>', 'Cell tower base station information in format "MCC,MNC,LAC,CID". "-c 460,0,4219,20925"', parseCell).option('-e, --engine <engine>', 'Geolocation service engine. {cellocation, google, gpsspg, haoservice, mozilla, mylnikov, opencellid, unwiredlabs, yandex}. Default: google', /^(cellocation|google|gpsspg|haoservice|mozilla|mylnikov|opencellid|unwiredlabs|yandex)$/i, 'google').option('-a, --arguments <arguments>', 'Arguments for geolocation engine. e.g. "key:XXX,oid:123".', parseArguments).option('-m, --map <map>', 'Map service. {google, bing, openstreetmap, google.cn, bing.cn, baidu}. Default: google', /^(google|bing|google\.cn|bing\.cn|openstreetmap|baidu)$/i).option('-v, --verbose', 'Verbose output.').on('--help', function () {
    console.log('  Examples:');
    console.log();
    console.log('    $ mobile-locator -a "key:XXX" -c 460,0,4219,20925');
    console.log('    $ mobile-locator -e cellocation -a "system:bd09" -m baidu -c 460,0,4219,20925');
    console.log();
  }).parse(process.argv);
}

function main() {
  if (program.verbose) {
    console.log('Geolocation engine: %j', program.engine);
    program.arguments.verbose = true;
  }
  var locate = api(program.engine, program.arguments);
  if (program.cell) {
    if (program.verbose) {
      console.log('Cell: %j', program.cell);
    }
    locate(program.cell).then(function (location) {
      if (program.verbose || program.map) {
        //  Verbose or need to show a map url
        console.log('Location: %j', location);
      } else {
        //  output pure JSON
        console.log(JSON.stringify(location));
      }

      if (program.map) {
        var url = map(program.map, location);
        console.log('Map url: ' + url);
      }
    }).catch(function (error) {
      console.error(error);
      program.help();
    });
  } else {
    console.error('Missing cell base station information.');
    program.help();
  }
}

setup();
main();