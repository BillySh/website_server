'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var has = require('lodash/has');
var Base = require('./base');

var API = 'http://api.haoservice.com/api/getlbs';

/* eslint-disable class-methods-use-this */

var HaoService = function (_Base) {
  _inherits(HaoService, _Base);

  function HaoService(options) {
    _classCallCheck(this, HaoService);

    var _this = _possibleConstructorReturn(this, (HaoService.__proto__ || Object.getPrototypeOf(HaoService)).call(this, options));

    if (options) {
      _this.key = options.key;
      _this.system = options.system;
    }
    return _this;
  }

  _createClass(HaoService, [{
    key: 'getRequestSettings',
    value: function getRequestSettings(cell) {
      return {
        uri: API,
        qs: {
          oid: this.oid,
          mcc: cell.mcc,
          mnc: cell.mnc,
          lac: cell.lac,
          cell_id: cell.cid,
          key: this.key,
          type: this.system || 2,
          output: 'json'
        },
        json: true
      };
    }
  }, {
    key: 'validate',
    value: function validate(body) {
      return body.ErrCode === '0';
    }
  }, {
    key: 'parseLocation',
    value: function parseLocation(body) {
      return {
        longitude: body.location.longitude,
        latitude: body.location.latitude,
        accuracy: body.location.accuracy,
        address: body.location.addressDescription
      };
    }
  }, {
    key: 'parseError',
    value: function parseError(body) {
      return has(body, 'ErrCode') ? body.ErrCode : body;
    }
  }]);

  return HaoService;
}(Base);

module.exports = HaoService;