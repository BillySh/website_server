'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var request = require('request-promise');
var debug = require('debug')('mobile-locator');

/* eslint-disable class-methods-use-this */

var Base = function () {
  function Base(options) {
    _classCallCheck(this, Base);

    if (options) {
      if (options.verbose) {
        request.debug = true;
      }
      if (options.timeout) {
        this.timeout = options.timeout;
      }
    }
  }

  _createClass(Base, [{
    key: 'getRequestSettings',
    value: function getRequestSettings() {
      return {};
    }
  }, {
    key: 'preprocessBody',
    value: function preprocessBody(body) {
      return body;
    }
  }, {
    key: 'validate',
    value: function validate() {
      return true;
    }
  }, {
    key: 'parseLocation',
    value: function parseLocation() {
      return {};
    }
  }, {
    key: 'parseError',
    value: function parseError(body) {
      return body;
    }
  }, {
    key: 'locate',
    value: function locate(cell) {
      var _this = this;

      //  Send request
      var options = Object.assign({}, this.getRequestSettings(cell), {
        resolveWithFullResponse: true,
        timeout: this.timeout
      });

      return request(options).then(function (response) {
        var b = _this.preprocessBody(response.body);
        if (response.statusCode === 200) {
          if (!_this.validate(b)) {
            //  Callback with error message
            throw new Error(_this.parseError(b));
          } else {
            //  Callback with location info
            return _this.parseLocation(b);
          }
        } else {
          //  Callback with HTTP Status Error Code
          throw new Error(response.statusCode + ': ' + response.statusMessage + ' (' + _this.parseError(b) + ')');
        }
      }).catch(function (error) {
        debug(error);
        if (error.message && (error.message.indexOf('ETIMEDOUT') >= 0 || error.message.indexOf('ESOCKETTIMEDOUT') >= 0)) {
          if (error.connect === true) {
            throw new Error('Request connection timeout.');
          } else {
            throw new Error('Request timeout.');
          }
        } else {
          //  Callback with error
          throw error;
        }
      });
    }
  }]);

  return Base;
}();

module.exports = Base;